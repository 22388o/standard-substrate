{"message":"unused imports: `Parameter`, `dispatch`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":5953,"byte_end":5962,"line_start":136,"line_end":136,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"use frame_support::{Parameter, decl_module, decl_event, decl_storage, decl_error, ensure, dispatch};","highlight_start":21,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6023,"byte_end":6031,"line_start":136,"line_end":136,"column_start":91,"column_end":99,"is_primary":true,"text":[{"text":"use frame_support::{Parameter, decl_module, decl_event, decl_storage, decl_error, ensure, dispatch};","highlight_start":91,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":5953,"byte_end":5964,"line_start":136,"line_end":136,"column_start":21,"column_end":32,"is_primary":true,"text":[{"text":"use frame_support::{Parameter, decl_module, decl_event, decl_storage, decl_error, ensure, dispatch};","highlight_start":21,"highlight_end":32}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6021,"byte_end":6031,"line_start":136,"line_end":136,"column_start":89,"column_end":99,"is_primary":true,"text":[{"text":"use frame_support::{Parameter, decl_module, decl_event, decl_storage, decl_error, ensure, dispatch};","highlight_start":89,"highlight_end":99}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Parameter`, `dispatch`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hskang9/standard-substrate/pallets/vault/src/lib.rs:136:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse frame_support::{Parameter, decl_module, decl_event, decl_storage, decl_error, ensure, dispatch};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused imports: `AtLeast32Bit`, `StaticLookup`, `Zero`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6059,"byte_end":6071,"line_start":137,"line_end":137,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{AtLeast32Bit, Zero, StaticLookup};","highlight_start":26,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6073,"byte_end":6077,"line_start":137,"line_end":137,"column_start":40,"column_end":44,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{AtLeast32Bit, Zero, StaticLookup};","highlight_start":40,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6079,"byte_end":6091,"line_start":137,"line_end":137,"column_start":46,"column_end":58,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{AtLeast32Bit, Zero, StaticLookup};","highlight_start":46,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6034,"byte_end":6093,"line_start":137,"line_end":137,"column_start":1,"column_end":60,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{AtLeast32Bit, Zero, StaticLookup};","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `AtLeast32Bit`, `StaticLookup`, `Zero`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hskang9/standard-substrate/pallets/vault/src/lib.rs:137:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_runtime::traits::{AtLeast32Bit, Zero, StaticLookup};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `fmt::Debug`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6107,"byte_end":6117,"line_start":138,"line_end":138,"column_start":14,"column_end":24,"is_primary":true,"text":[{"text":"use sp_std::{fmt::Debug, prelude::*};","highlight_start":14,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6107,"byte_end":6119,"line_start":138,"line_end":138,"column_start":14,"column_end":26,"is_primary":true,"text":[{"text":"use sp_std::{fmt::Debug, prelude::*};","highlight_start":14,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `fmt::Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hskang9/standard-substrate/pallets/vault/src/lib.rs:138:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_std::{fmt::Debug, prelude::*};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `sp_runtime::traits::One`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6169,"byte_end":6192,"line_start":140,"line_end":140,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"use sp_runtime::traits::One;","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6165,"byte_end":6193,"line_start":140,"line_end":140,"column_start":1,"column_end":29,"is_primary":true,"text":[{"text":"use sp_runtime::traits::One;","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `sp_runtime::traits::One`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hskang9/standard-substrate/pallets/vault/src/lib.rs:140:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_runtime::traits::One;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `HasCompact`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6274,"byte_end":6284,"line_start":143,"line_end":143,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"use codec::{Encode, Decode, HasCompact};","highlight_start":29,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6272,"byte_end":6284,"line_start":143,"line_end":143,"column_start":27,"column_end":39,"is_primary":true,"text":[{"text":"use codec::{Encode, Decode, HasCompact};","highlight_start":27,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `HasCompact`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hskang9/standard-substrate/pallets/vault/src/lib.rs:143:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse codec::{Encode, Decode, HasCompact};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `FixedPointNumber`, `FixedU128`, `SaturatedConversion`, `UniqueSaturatedFrom`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6304,"byte_end":6313,"line_start":144,"line_end":144,"column_start":18,"column_end":27,"is_primary":true,"text":[{"text":"use sp_runtime::{FixedU128, FixedPointNumber, SaturatedConversion, RuntimeDebug, traits::{UniqueSaturatedInto, UniqueSaturatedFrom}, ModuleId};","highlight_start":18,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6315,"byte_end":6331,"line_start":144,"line_end":144,"column_start":29,"column_end":45,"is_primary":true,"text":[{"text":"use sp_runtime::{FixedU128, FixedPointNumber, SaturatedConversion, RuntimeDebug, traits::{UniqueSaturatedInto, UniqueSaturatedFrom}, ModuleId};","highlight_start":29,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6333,"byte_end":6352,"line_start":144,"line_end":144,"column_start":47,"column_end":66,"is_primary":true,"text":[{"text":"use sp_runtime::{FixedU128, FixedPointNumber, SaturatedConversion, RuntimeDebug, traits::{UniqueSaturatedInto, UniqueSaturatedFrom}, ModuleId};","highlight_start":47,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6398,"byte_end":6417,"line_start":144,"line_end":144,"column_start":112,"column_end":131,"is_primary":true,"text":[{"text":"use sp_runtime::{FixedU128, FixedPointNumber, SaturatedConversion, RuntimeDebug, traits::{UniqueSaturatedInto, UniqueSaturatedFrom}, ModuleId};","highlight_start":112,"highlight_end":131}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6304,"byte_end":6354,"line_start":144,"line_end":144,"column_start":18,"column_end":68,"is_primary":true,"text":[{"text":"use sp_runtime::{FixedU128, FixedPointNumber, SaturatedConversion, RuntimeDebug, traits::{UniqueSaturatedInto, UniqueSaturatedFrom}, ModuleId};","highlight_start":18,"highlight_end":68}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6396,"byte_end":6417,"line_start":144,"line_end":144,"column_start":110,"column_end":131,"is_primary":true,"text":[{"text":"use sp_runtime::{FixedU128, FixedPointNumber, SaturatedConversion, RuntimeDebug, traits::{UniqueSaturatedInto, UniqueSaturatedFrom}, ModuleId};","highlight_start":110,"highlight_end":131}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `FixedPointNumber`, `FixedU128`, `SaturatedConversion`, `UniqueSaturatedFrom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hskang9/standard-substrate/pallets/vault/src/lib.rs:144:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_runtime::{FixedU128, FixedPointNumber, SaturatedConversion, RuntimeDebug, traits::{UniqueSaturatedInto, UniqueSaturatedFrom}, Modu\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `CheckedAdd`, `CheckedSub`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6468,"byte_end":6478,"line_start":145,"line_end":145,"column_start":38,"column_end":48,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{CheckedMul, CheckedAdd, CheckedDiv, CheckedSub};","highlight_start":38,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6492,"byte_end":6502,"line_start":145,"line_end":145,"column_start":62,"column_end":72,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{CheckedMul, CheckedAdd, CheckedDiv, CheckedSub};","highlight_start":62,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6466,"byte_end":6478,"line_start":145,"line_end":145,"column_start":36,"column_end":48,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{CheckedMul, CheckedAdd, CheckedDiv, CheckedSub};","highlight_start":36,"highlight_end":48}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":6490,"byte_end":6502,"line_start":145,"line_end":145,"column_start":60,"column_end":72,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{CheckedMul, CheckedAdd, CheckedDiv, CheckedSub};","highlight_start":60,"highlight_end":72}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `CheckedAdd`, `CheckedSub`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hskang9/standard-substrate/pallets/vault/src/lib.rs:145:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_runtime::traits::{CheckedMul, CheckedAdd, CheckedDiv, CheckedSub};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the trait bound `Call<T>: Decode` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":63162,"byte_end":63205,"line_start":1870,"line_end":1870,"column_start":72,"column_end":115,"is_primary":true,"text":[{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":72,"highlight_end":115}],"label":"the trait `Decode` is not implemented for `Call<T>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":41685,"byte_end":42189,"line_start":1214,"line_end":1229,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@imp","highlight_start":3,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":36084,"byte_end":36854,"line_start":1054,"line_end":1080,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":36084,"byte_end":36854,"line_start":1054,"line_end":1080,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":14514,"byte_end":15047,"line_start":394,"line_end":409,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":33480,"byte_end":34010,"line_start":969,"line_end":986,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":32210,"byte_end":32815,"line_start":922,"line_end":944,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12778,"byte_end":13125,"line_start":320,"line_end":337,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":7431,"byte_end":13652,"line_start":172,"line_end":297,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"decl_module! {","highlight_start":1,"highlight_end":15},{"text":"\tpub struct Module<T: Trait> for enum Call where origin: T::Origin {","highlight_start":1,"highlight_end":69},{"text":"        const ModuleId: ModuleId = T::VaultModuleId::get();","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\ttype Error = Error<T>;","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn deposit_event() = default;","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[weight= 0]","highlight_start":1,"highlight_end":21},{"text":"        fn generate(","highlight_start":1,"highlight_end":21},{"text":"            origin,","highlight_start":1,"highlight_end":20},{"text":"            #[compact] request_amount: <T as pallet_balances::Trait>::Balance,","highlight_start":1,"highlight_end":79},{"text":"            #[compact] collateral_id: T::AssetId, ","highlight_start":1,"highlight_end":51},{"text":"            #[compact] collateral_amount: <T as pallet_balances::Trait>::Balance) {","highlight_start":1,"highlight_end":84},{"text":"            let origin = ensure_signed(origin)?;","highlight_start":1,"highlight_end":49},{"text":"            // Get position for the collateral","highlight_start":1,"highlight_end":47},{"text":"            let position = Self::position(collateral_id);","highlight_start":1,"highlight_end":58},{"text":"            ensure!(position.is_some(), Error::<T>::CollateralNotSupported);","highlight_start":1,"highlight_end":77},{"text":"            // Get price from oracles","highlight_start":1,"highlight_end":38},{"text":"            let collateral_price = oracle::Module::<T>::price(collateral_id)?;","highlight_start":1,"highlight_end":79},{"text":"            let mtr_price = oracle::Module::<T>::price(T::AssetId::from(1))?;","highlight_start":1,"highlight_end":78},{"text":"            // Get vault from sender and divide cases","highlight_start":1,"highlight_end":54},{"text":"            let (total_collateral, total_request) = match Self::vault((origin.clone(), collateral_id)) {","highlight_start":1,"highlight_end":105},{"text":"                // vault exists for the sender","highlight_start":1,"highlight_end":47},{"text":"                Some(x) => {","highlight_start":1,"highlight_end":29},{"text":"                    // Add collateral and mtr amount from existing vault","highlight_start":1,"highlight_end":73},{"text":"                    let collateral_total = collateral_amount + x.0;","highlight_start":1,"highlight_end":68},{"text":"                    let request_total = request_amount + x.1;  ","highlight_start":1,"highlight_end":64},{"text":"                    (collateral_total, request_total)","highlight_start":1,"highlight_end":54},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                // vault does not exist for the sender","highlight_start":1,"highlight_end":55},{"text":"                None => {","highlight_start":1,"highlight_end":26},{"text":"                    (collateral_amount, request_amount)","highlight_start":1,"highlight_end":56},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let result = Self::is_cdp_valid(&position.unwrap(), &collateral_price, &total_collateral, &mtr_price, &total_request);","highlight_start":1,"highlight_end":131},{"text":"            // Check whether CDP is valid","highlight_start":1,"highlight_end":42},{"text":"            ensure!(result, Error::<T>::InvalidCDP);","highlight_start":1,"highlight_end":53},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            // Send collateral to Standard Protocol","highlight_start":1,"highlight_end":52},{"text":"            token::Module::<T>::transfer_to_system(&collateral_id, &origin, &collateral_amount)?;","highlight_start":1,"highlight_end":98},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Update CDP","highlight_start":1,"highlight_end":26},{"text":"            <Vault<T>>::mutate((origin.clone(), collateral_id), |vlt|{","highlight_start":1,"highlight_end":71},{"text":"                *vlt = Some((total_collateral, total_request));","highlight_start":1,"highlight_end":64},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Send mtr to sender","highlight_start":1,"highlight_end":34},{"text":"            token::Module::<T>::transfer_to_system(&T::AssetId::from(1), &origin, &request_amount)?;","highlight_start":1,"highlight_end":101},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // deposit event","highlight_start":1,"highlight_end":29},{"text":"            Self::deposit_event(RawEvent::UpdateVault(origin, collateral_id, total_collateral, request_amount))","highlight_start":1,"highlight_end":112},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[weight=0]","highlight_start":1,"highlight_end":20},{"text":"        fn liquidate(origin, #[compact] account: T::AccountId, #[compact] collateral_id: T::AssetId) {","highlight_start":1,"highlight_end":103},{"text":"            let origin = ensure_signed(origin)?;","highlight_start":1,"highlight_end":49},{"text":"            let vault = <Vault<T>>::get((account.clone(), collateral_id));","highlight_start":1,"highlight_end":75},{"text":"            ensure!(vault.is_some(), Error::<T>::VaultDoesNotExist);","highlight_start":1,"highlight_end":69},{"text":"            // check if the vault is still valid","highlight_start":1,"highlight_end":49},{"text":"            let position = Self::position(collateral_id);","highlight_start":1,"highlight_end":58},{"text":"            ensure!(position.is_some(), Error::<T>::CollateralNotSupported);","highlight_start":1,"highlight_end":77},{"text":"            // Get price from oracles","highlight_start":1,"highlight_end":38},{"text":"            let collateral_price = oracle::Module::<T>::price(collateral_id)?;","highlight_start":1,"highlight_end":79},{"text":"            let mtr_price = oracle::Module::<T>::price(T::AssetId::from(1))?;","highlight_start":1,"highlight_end":78},{"text":"            let (collateral_amount, request_amount) = position.unwrap();","highlight_start":1,"highlight_end":73},{"text":"            let result = Self::is_cdp_valid(&position.unwrap(), &collateral_price, &collateral_amount, &mtr_price, &request_amount);","highlight_start":1,"highlight_end":133},{"text":"            // Check whether cdp is invalid","highlight_start":1,"highlight_end":44},{"text":"            ensure!(!result, Error::<T>::Unavailable);","highlight_start":1,"highlight_end":55},{"text":"            // liquidate the vault","highlight_start":1,"highlight_end":35},{"text":"            // Pay liquidation fee to the liquidator","highlight_start":1,"highlight_end":53},{"text":"            let liquidation_rate = position.liquidation_fee;","highlight_start":1,"highlight_end":61},{"text":"            let fee = collateral_amount/liquidation_rate.1*position.liquidation_fee.0;","highlight_start":1,"highlight_end":87},{"text":"            token::Module::<T>::transfer_from_system(collateral_id.clone(), origin.clone(), fee)?;","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let rest = collateral_amount - fee;","highlight_start":1,"highlight_end":48},{"text":"            // Check pairs in the market","highlight_start":1,"highlight_end":41},{"text":"            let lpt = market::Pairs::<T>::get(T::AssetId::from(1), collateral_id.clone());","highlight_start":1,"highlight_end":91},{"text":"            ensure!(lpt.is_some(), Error::<T>::MarketDoesNotExist);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Send collateral to the market","highlight_start":1,"highlight_end":45},{"text":"            let reserves = market::Reserves::<T>::get(lpt.clone());","highlight_start":1,"highlight_end":68},{"text":"            market::Module::<T>::_set_reserves(T::AssetId::from(1), collateral_id.clone(), reserves.0, reserves.1+rest, lpt);","highlight_start":1,"highlight_end":126},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            // destroy the vault","highlight_start":1,"highlight_end":33},{"text":"            <Vault<T>>::delete((account.clone(), collateral_id.clone()));","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // deposit event","highlight_start":1,"highlight_end":29},{"text":"            Self::deposit_event(RawEvent::Liquidate(collateral_id, collateral_amount));","highlight_start":1,"highlight_end":88},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[weight=0]","highlight_start":1,"highlight_end":20},{"text":"        fn close(origin, #[compact] collateral_id: T::AssetId) {","highlight_start":1,"highlight_end":65},{"text":"            let origin = ensure_signed(origin)?;","highlight_start":1,"highlight_end":49},{"text":"            let vault = <Vault<T>>::get((origin.clone(), collateral_id));","highlight_start":1,"highlight_end":74},{"text":"            ensure!(vault.is_some(), Error::<T>::VaultDoesNotExist);","highlight_start":1,"highlight_end":69},{"text":"            // check if the vault is still valid","highlight_start":1,"highlight_end":49},{"text":"            let position = Self::position(collateral_id);","highlight_start":1,"highlight_end":58},{"text":"            ensure!(position.is_some(), Error::<T>::CollateralNotSupported);","highlight_start":1,"highlight_end":77},{"text":"            // Get price from oracles","highlight_start":1,"highlight_end":38},{"text":"            let collateral_price = oracle::Module::<T>::price(collateral_id)?;","highlight_start":1,"highlight_end":79},{"text":"            let mtr_price = oracle::Module::<T>::price(T::AssetId::from(1))?;","highlight_start":1,"highlight_end":78},{"text":"            let (collateral_amount, request_amount) = position.unwrap();","highlight_start":1,"highlight_end":73},{"text":"            let result = Self::is_cdp_valid(&position.unwrap(), &collateral_price, &collateral_amount, &mtr_price, &request_amount);","highlight_start":1,"highlight_end":133},{"text":"            // Check whether cdp is valid and safe from liquidation.","highlight_start":1,"highlight_end":69},{"text":"            ensure!(result, Error::<T>::AddMoreCollateral);","highlight_start":1,"highlight_end":60},{"text":"            // close the vault","highlight_start":1,"highlight_end":31},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            // Pay stability fee with collateral to the Standard treasury","highlight_start":1,"highlight_end":74},{"text":"            let stability_rate = position.stability_fee;","highlight_start":1,"highlight_end":57},{"text":"            let fee = collateral_amount/stability_rate.1*position.stability_fee.0;","highlight_start":1,"highlight_end":83},{"text":"            token::Module::<T>::transfer_within(collateral_id.clone(), Self::account_id(), fee)?;","highlight_start":1,"highlight_end":98},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let rest = collateral_amount - fee;","highlight_start":1,"highlight_end":48},{"text":"             ","highlight_start":1,"highlight_end":14},{"text":"            // Give back the collateral","highlight_start":1,"highlight_end":40},{"text":"            token::Module::<T>::transfer_from_system(collateral_id, origin, rest);","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // deposit event","highlight_start":1,"highlight_end":29},{"text":"            Self::deposit_event(RawEvent::CloseVault(collateral_id, collateral_amount, request_amount));","highlight_start":1,"highlight_end":105},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Call<T>: Decode` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hskang9/standard-substrate/pallets/vault/src/lib.rs:172:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdecl_module! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Module<T: Trait> for enum Call where origin: T::Origin {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        const ModuleId: ModuleId = T::VaultModuleId::get();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m296\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m297\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Decode` is not implemented for `Call<T>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `Call<T>: _::_parity_scale_codec::Encode` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":63162,"byte_end":63205,"line_start":1870,"line_end":1870,"column_start":72,"column_end":115,"is_primary":true,"text":[{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":72,"highlight_end":115}],"label":"the trait `_::_parity_scale_codec::Encode` is not implemented for `Call<T>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":41685,"byte_end":42189,"line_start":1214,"line_end":1229,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@imp","highlight_start":3,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":36084,"byte_end":36854,"line_start":1054,"line_end":1080,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":36084,"byte_end":36854,"line_start":1054,"line_end":1080,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":14514,"byte_end":15047,"line_start":394,"line_end":409,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":33480,"byte_end":34010,"line_start":969,"line_end":986,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":32210,"byte_end":32815,"line_start":922,"line_end":944,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12778,"byte_end":13125,"line_start":320,"line_end":337,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hskang9/standard-substrate/pallets/vault/src/lib.rs","byte_start":7431,"byte_end":13652,"line_start":172,"line_end":297,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"decl_module! {","highlight_start":1,"highlight_end":15},{"text":"\tpub struct Module<T: Trait> for enum Call where origin: T::Origin {","highlight_start":1,"highlight_end":69},{"text":"        const ModuleId: ModuleId = T::VaultModuleId::get();","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\ttype Error = Error<T>;","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn deposit_event() = default;","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[weight= 0]","highlight_start":1,"highlight_end":21},{"text":"        fn generate(","highlight_start":1,"highlight_end":21},{"text":"            origin,","highlight_start":1,"highlight_end":20},{"text":"            #[compact] request_amount: <T as pallet_balances::Trait>::Balance,","highlight_start":1,"highlight_end":79},{"text":"            #[compact] collateral_id: T::AssetId, ","highlight_start":1,"highlight_end":51},{"text":"            #[compact] collateral_amount: <T as pallet_balances::Trait>::Balance) {","highlight_start":1,"highlight_end":84},{"text":"            let origin = ensure_signed(origin)?;","highlight_start":1,"highlight_end":49},{"text":"            // Get position for the collateral","highlight_start":1,"highlight_end":47},{"text":"            let position = Self::position(collateral_id);","highlight_start":1,"highlight_end":58},{"text":"            ensure!(position.is_some(), Error::<T>::CollateralNotSupported);","highlight_start":1,"highlight_end":77},{"text":"            // Get price from oracles","highlight_start":1,"highlight_end":38},{"text":"            let collateral_price = oracle::Module::<T>::price(collateral_id)?;","highlight_start":1,"highlight_end":79},{"text":"            let mtr_price = oracle::Module::<T>::price(T::AssetId::from(1))?;","highlight_start":1,"highlight_end":78},{"text":"            // Get vault from sender and divide cases","highlight_start":1,"highlight_end":54},{"text":"            let (total_collateral, total_request) = match Self::vault((origin.clone(), collateral_id)) {","highlight_start":1,"highlight_end":105},{"text":"                // vault exists for the sender","highlight_start":1,"highlight_end":47},{"text":"                Some(x) => {","highlight_start":1,"highlight_end":29},{"text":"                    // Add collateral and mtr amount from existing vault","highlight_start":1,"highlight_end":73},{"text":"                    let collateral_total = collateral_amount + x.0;","highlight_start":1,"highlight_end":68},{"text":"                    let request_total = request_amount + x.1;  ","highlight_start":1,"highlight_end":64},{"text":"                    (collateral_total, request_total)","highlight_start":1,"highlight_end":54},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                // vault does not exist for the sender","highlight_start":1,"highlight_end":55},{"text":"                None => {","highlight_start":1,"highlight_end":26},{"text":"                    (collateral_amount, request_amount)","highlight_start":1,"highlight_end":56},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let result = Self::is_cdp_valid(&position.unwrap(), &collateral_price, &total_collateral, &mtr_price, &total_request);","highlight_start":1,"highlight_end":131},{"text":"            // Check whether CDP is valid","highlight_start":1,"highlight_end":42},{"text":"            ensure!(result, Error::<T>::InvalidCDP);","highlight_start":1,"highlight_end":53},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            // Send collateral to Standard Protocol","highlight_start":1,"highlight_end":52},{"text":"            token::Module::<T>::transfer_to_system(&collateral_id, &origin, &collateral_amount)?;","highlight_start":1,"highlight_end":98},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Update CDP","highlight_start":1,"highlight_end":26},{"text":"            <Vault<T>>::mutate((origin.clone(), collateral_id), |vlt|{","highlight_start":1,"highlight_end":71},{"text":"                *vlt = Some((total_collateral, total_request));","highlight_start":1,"highlight_end":64},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Send mtr to sender","highlight_start":1,"highlight_end":34},{"text":"            token::Module::<T>::transfer_to_system(&T::AssetId::from(1), &origin, &request_amount)?;","highlight_start":1,"highlight_end":101},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // deposit event","highlight_start":1,"highlight_end":29},{"text":"            Self::deposit_event(RawEvent::UpdateVault(origin, collateral_id, total_collateral, request_amount))","highlight_start":1,"highlight_end":112},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[weight=0]","highlight_start":1,"highlight_end":20},{"text":"        fn liquidate(origin, #[compact] account: T::AccountId, #[compact] collateral_id: T::AssetId) {","highlight_start":1,"highlight_end":103},{"text":"            let origin = ensure_signed(origin)?;","highlight_start":1,"highlight_end":49},{"text":"            let vault = <Vault<T>>::get((account.clone(), collateral_id));","highlight_start":1,"highlight_end":75},{"text":"            ensure!(vault.is_some(), Error::<T>::VaultDoesNotExist);","highlight_start":1,"highlight_end":69},{"text":"            // check if the vault is still valid","highlight_start":1,"highlight_end":49},{"text":"            let position = Self::position(collateral_id);","highlight_start":1,"highlight_end":58},{"text":"            ensure!(position.is_some(), Error::<T>::CollateralNotSupported);","highlight_start":1,"highlight_end":77},{"text":"            // Get price from oracles","highlight_start":1,"highlight_end":38},{"text":"            let collateral_price = oracle::Module::<T>::price(collateral_id)?;","highlight_start":1,"highlight_end":79},{"text":"            let mtr_price = oracle::Module::<T>::price(T::AssetId::from(1))?;","highlight_start":1,"highlight_end":78},{"text":"            let (collateral_amount, request_amount) = position.unwrap();","highlight_start":1,"highlight_end":73},{"text":"            let result = Self::is_cdp_valid(&position.unwrap(), &collateral_price, &collateral_amount, &mtr_price, &request_amount);","highlight_start":1,"highlight_end":133},{"text":"            // Check whether cdp is invalid","highlight_start":1,"highlight_end":44},{"text":"            ensure!(!result, Error::<T>::Unavailable);","highlight_start":1,"highlight_end":55},{"text":"            // liquidate the vault","highlight_start":1,"highlight_end":35},{"text":"            // Pay liquidation fee to the liquidator","highlight_start":1,"highlight_end":53},{"text":"            let liquidation_rate = position.liquidation_fee;","highlight_start":1,"highlight_end":61},{"text":"            let fee = collateral_amount/liquidation_rate.1*position.liquidation_fee.0;","highlight_start":1,"highlight_end":87},{"text":"            token::Module::<T>::transfer_from_system(collateral_id.clone(), origin.clone(), fee)?;","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let rest = collateral_amount - fee;","highlight_start":1,"highlight_end":48},{"text":"            // Check pairs in the market","highlight_start":1,"highlight_end":41},{"text":"            let lpt = market::Pairs::<T>::get(T::AssetId::from(1), collateral_id.clone());","highlight_start":1,"highlight_end":91},{"text":"            ensure!(lpt.is_some(), Error::<T>::MarketDoesNotExist);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Send collateral to the market","highlight_start":1,"highlight_end":45},{"text":"            let reserves = market::Reserves::<T>::get(lpt.clone());","highlight_start":1,"highlight_end":68},{"text":"            market::Module::<T>::_set_reserves(T::AssetId::from(1), collateral_id.clone(), reserves.0, reserves.1+rest, lpt);","highlight_start":1,"highlight_end":126},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            // destroy the vault","highlight_start":1,"highlight_end":33},{"text":"            <Vault<T>>::delete((account.clone(), collateral_id.clone()));","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // deposit event","highlight_start":1,"highlight_end":29},{"text":"            Self::deposit_event(RawEvent::Liquidate(collateral_id, collateral_amount));","highlight_start":1,"highlight_end":88},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[weight=0]","highlight_start":1,"highlight_end":20},{"text":"        fn close(origin, #[compact] collateral_id: T::AssetId) {","highlight_start":1,"highlight_end":65},{"text":"            let origin = ensure_signed(origin)?;","highlight_start":1,"highlight_end":49},{"text":"            let vault = <Vault<T>>::get((origin.clone(), collateral_id));","highlight_start":1,"highlight_end":74},{"text":"            ensure!(vault.is_some(), Error::<T>::VaultDoesNotExist);","highlight_start":1,"highlight_end":69},{"text":"            // check if the vault is still valid","highlight_start":1,"highlight_end":49},{"text":"            let position = Self::position(collateral_id);","highlight_start":1,"highlight_end":58},{"text":"            ensure!(position.is_some(), Error::<T>::CollateralNotSupported);","highlight_start":1,"highlight_end":77},{"text":"            // Get price from oracles","highlight_start":1,"highlight_end":38},{"text":"            let collateral_price = oracle::Module::<T>::price(collateral_id)?;","highlight_start":1,"highlight_end":79},{"text":"            let mtr_price = oracle::Module::<T>::price(T::AssetId::from(1))?;","highlight_start":1,"highlight_end":78},{"text":"            let (collateral_amount, request_amount) = position.unwrap();","highlight_start":1,"highlight_end":73},{"text":"            let result = Self::is_cdp_valid(&position.unwrap(), &collateral_price, &collateral_amount, &mtr_price, &request_amount);","highlight_start":1,"highlight_end":133},{"text":"            // Check whether cdp is valid and safe from liquidation.","highlight_start":1,"highlight_end":69},{"text":"            ensure!(result, Error::<T>::AddMoreCollateral);","highlight_start":1,"highlight_end":60},{"text":"            // close the vault","highlight_start":1,"highlight_end":31},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            // Pay stability fee with collateral to the Standard treasury","highlight_start":1,"highlight_end":74},{"text":"            let stability_rate = position.stability_fee;","highlight_start":1,"highlight_end":57},{"text":"            let fee = collateral_amount/stability_rate.1*position.stability_fee.0;","highlight_start":1,"highlight_end":83},{"text":"            token::Module::<T>::transfer_within(collateral_id.clone(), Self::account_id(), fee)?;","highlight_start":1,"highlight_end":98},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let rest = collateral_amount - fee;","highlight_start":1,"highlight_end":48},{"text":"             ","highlight_start":1,"highlight_end":14},{"text":"            // Give back the collateral","highlight_start":1,"highlight_end":40},{"text":"            token::Module::<T>::transfer_from_system(collateral_id, origin, rest);","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // deposit event","highlight_start":1,"highlight_end":29},{"text":"            Self::deposit_event(RawEvent::CloseVault(collateral_id, collateral_amount, request_amount));","highlight_start":1,"highlight_end":105},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.1/src/dispatch.rs","byte_start":12422,"byte_end":64186,"line_start":308,"line_end":1901,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* $(,)? {","highlight_start":1,"highlight_end":105},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = frame_system","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$(,)?","highlight_start":1,"highlight_end":9},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `deposit_event` being added a second time.","highlight_start":1,"highlight_end":64},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`deposit_event` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_finalize` being added a second time.","highlight_start":1,"highlight_end":62},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )+ }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_finalize` can only be passed once as input.\");","highlight_start":1,"highlight_end":69},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `on_runtime_upgrade` being added a second time.","highlight_start":1,"highlight_end":69},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )+ }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_runtime_upgrade` can only be passed once as input.\");","highlight_start":1,"highlight_end":76},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tfn integrity_test() { $( $impl)* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on `integrity_test` being added a second time.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )+ }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`integrity_test` can only be passed once as input.\");","highlight_start":1,"highlight_end":72},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `on_initialize`.","highlight_start":1,"highlight_end":61},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )+ }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`on_initialize` can only be passed once as input.\");","highlight_start":1,"highlight_end":71},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Compile error on trying to add a second `offchain_worker`.","highlight_start":1,"highlight_end":63},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )+ }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":100},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(\"`offchain_worker` can only be passed once as input.\");","highlight_start":1,"highlight_end":73},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t{ $( $integrity_test)* }","highlight_start":1,"highlight_end":28},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t/// Deposits an event using `frame_system::Module::deposit_event`.","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) -> $return {","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_initialize\"));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnInitialize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":82},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_runtime_upgrade\"));","highlight_start":1,"highlight_end":92},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn integrity_test() { $( $impl:tt )* }","highlight_start":1,"highlight_end":41},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":26},{"text":"\t\t\tfn integrity_test() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$( $impl )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_integrity_test","highlight_start":1,"highlight_end":23},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::IntegrityTest","highlight_start":1,"highlight_end":33},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(\"on_finalize\"));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OnFinalize<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":80},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: <$trait_instance as $system::Trait>::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":112},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $system:ident }","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $system::Trait + $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":87},{"text":"\t\t\t$crate::traits::OffchainWorker<<$trait_instance as $system::Trait>::BlockNumber>","highlight_start":1,"highlight_end":84},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":23},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":18},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!($crate::sp_tracing::trace_span!(stringify!($name)));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$(#[$fn_attr:meta])*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t{ $( $integrity_test:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t{ $system }","highlight_start":1,"highlight_end":15},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_integrity_test","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $integrity_test )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t///","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t/// NOTE: Calling this function will bypass origin filters.","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\t$(#[$fn_attr])*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::traits::UnfilteredDispatchable","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tfn dispatch_bypass_filter(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":108},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Call<T>: _::_parity_scale_codec::Encode` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hskang9/standard-substrate/pallets/vault/src/lib.rs:172:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdecl_module! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Module<T: Trait> for enum Call where origin: T::Origin {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        const ModuleId: ModuleId = T::VaultModuleId::get();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m296\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m297\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `_::_parity_scale_codec::Encode` is not implemented for `Call<T>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors; 7 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 7 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
